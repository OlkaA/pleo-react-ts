{"version":3,"sources":["reducers/expensesReducer.ts","store.ts","types/actions.ts","components/Navigation/Navigation.tsx","pages/HomePage/HomePage.tsx","actions/expensesAction.ts","components/ExpenseItem/ExpenseItem.tsx","components/Button/Button.tsx","components/Pagination/Pagination.tsx","components/ListOfExpenses/ListOfExpenses.tsx","components/FilterInput/FilterInput.tsx","components/Filter/Filter.tsx","pages/ExpensesPage/ExpensesPage.tsx","components/Receipts/Receipts.tsx","components/Comment/Comment.tsx","pages/ExpensePage/ExpensePage.tsx","pages/ErrorPage/ErrorPage.tsx","pages/AboutPage/AboutPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["expensesReducerDefaultState","expenses","total","rootReducer","combineReducers","data","state","action","type","payload","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Navigation","to","HomePage","className","Component","fetchExpenses","startFetchExpenses","page","dispatch","getState","a","offset","undefined","fetch","response","json","moment","require","ExpenseItem","this","props","id","merchant","date","format","amount","value","currency","userName","user","first","last","receipts","length","comment","data-title","pathname","Button","onClick","Pagination","goToNextPage","currentIndex","pages","index","setState","goToPage","goToPrevPage","Math","ceil","numberOfItems","ListOfExpenses","sortList","message","colSpan","map","item","key","React","FilterInput","label","onChange","Filter","onsearchByNameChange","event","searchByName","target","onFilterChange","onsearchByPlace","searchByPlace","ExpensesPage","filteredArray","isSorted","filter","expense","toLowerCase","includes","sortedArray","sort","b","localeCompare","paginationPage","string","connect","ownProps","bindActionCreators","Receipts","userId","fetchExpense","addReceipt","receipt","FormData","append","files","method","body","name","title","Comment","onCommentChange","trim","addComment","headers","JSON","stringify","placeholder","autoComplete","onKeyPress","ExpensePage","currentExpense","match","params","userEmail","category","Object","entries","email","ErrorPage","AboutPage","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.090d4577.chunk.js","sourcesContent":["import { Expense } from \"../types/Expense\";\r\nimport { FETCH_EXPENSES, ExpenseActionTypes } from '../types/actions';\r\n\r\nconst expensesReducerDefaultState: { expenses: Expense[], total: number } = { expenses: [], total: 0 };\r\n\r\nconst expensesReducer = (\r\n  state = expensesReducerDefaultState,\r\n  action: ExpenseActionTypes\r\n): {} => {\r\n  switch (action.type) {\r\n    case FETCH_EXPENSES:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport { expensesReducer };\r\n","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\r\nimport { expensesReducer } from './reducers/expensesReducer';\r\nimport { AppActions } from \"./types/actions\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  data: expensesReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\ndeclare global {\r\n  interface Window {\r\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n  }\r\n}\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(\r\n    applyMiddleware(thunk as ThunkMiddleware<AppState, AppActions>))\r\n);","import { Expense } from \"./Expense\";\r\n\r\nexport const FETCH_EXPENSES = \"FETCH_EXPENSES\";\r\n\r\nexport interface FetchExpensesAction {\r\n  type: typeof FETCH_EXPENSES;\r\n  payload: {\r\n    expenses: Expense[];\r\n    total: number;\r\n  }\r\n}\r\n\r\nexport type ExpenseActionTypes = FetchExpensesAction\r\n\r\nexport type AppActions = ExpenseActionTypes | FetchExpensesAction;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './navigation.scss';\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <nav>\r\n            <Link\r\n                to='/expenses'\r\n            >Expenses</Link>\r\n            <Link\r\n                to='/about'\r\n            >About</Link>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport Navigation from '../../components/Navigation/Navigation'\r\nimport './homepage.scss';\r\n\r\nclass HomePage extends Component {\r\n    render() {\r\n        return (\r\n            <div className='column home-page-wrapper'>\r\n                <div className='home-page'>\r\n                    <Navigation />\r\n                    <h1 className='home-page-title'>\r\n                        Best way to deal with your expenses.\r\n                    </h1>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default HomePage;\r\n","import { Expense } from \"../types/Expense\";\r\nimport {\r\n  FETCH_EXPENSES,\r\n  AppActions\r\n} from \"../types/actions\";\r\nimport { Dispatch } from \"redux\";\r\nimport { AppState } from \"../store\";\r\n\r\nexport const fetchExpenses = (expenses: Expense[], total: number): AppActions => ({\r\n  type: FETCH_EXPENSES,\r\n  payload: {\r\n    expenses, total\r\n  }\r\n});\r\n\r\nexport const startFetchExpenses = (\r\n  page?: number\r\n) => {\r\n  return async (dispatch: Dispatch<AppActions>, getState: () => AppState) => {\r\n    let limit = 25,\r\n      offset;\r\n    if (page === undefined) {\r\n      offset = 0;\r\n    } else {\r\n      offset = page * 25;\r\n    }\r\n    const response = await fetch(\r\n      `/expenses?limit=${limit}&offset=${offset}`\r\n    );\r\n    const expenses = await response.json();\r\n    dispatch(fetchExpenses(expenses.expenses, expenses.total));\r\n  };\r\n};\r\n\r\n\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Expense } from '../../types/Expense';\r\nimport '../ListOfExpenses/list.scss';\r\nconst moment = require('moment');\r\n\r\n\r\ninterface IExpenseItemProps {\r\n  data: Expense\r\n};\r\n\r\nclass ExpenseItem extends Component<IExpenseItemProps> {\r\n  render() {\r\n    const { id, merchant } = this.props.data;\r\n    const date = moment(this.props.data.date).format('L');\r\n    const amount = `${this.props.data.amount.value} ${this.props.data.amount.currency}`;\r\n    const userName = `${this.props.data.user.first} ${this.props.data.user.last}`;\r\n    const receipts = this.props.data.receipts.length || '-';\r\n    const comment = this.props.data.comment || '-';\r\n    return (\r\n      <tr>\r\n        <td data-title='Amount'>{amount}</td>\r\n        <td data-title='Date'>{date}</td>\r\n        <td data-title='Merchant'>{merchant}</td>\r\n        <td data-title='User'>{userName}</td>\r\n        <td data-title='Receipts'>{receipts}</td>\r\n        <td data-title='Comment'>{comment}</td>\r\n        <td>\r\n          <Link\r\n            to={{\r\n              pathname: `/expenses/${id}`\r\n            }\r\n            }\r\n          >\r\n            {' '}\r\n            See more{' '}\r\n          </Link>\r\n        </td>\r\n      </tr>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExpenseItem;\r\n","import React from 'react';\r\n\r\nfunction Button(props: any) {\r\n    return (\r\n        <button onClick={props.onClick}>{props.value}</button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport './pagination.scss';\r\nimport Button from '../Button/Button';\r\n\r\ninterface IPaginationProps {\r\n    numberOfItems: number\r\n    goToPage(page: number): void;\r\n};\r\n\r\ninterface IPaginationState {\r\n    currentIndex: number,\r\n    pages: number\r\n};\r\n\r\nclass Pagination extends Component<IPaginationProps, IPaginationState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            currentIndex: 0,\r\n            pages: 0\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({ pages: Math.ceil(this.props.numberOfItems / 25) })\r\n    }\r\n\r\n    goToNextPage = () => {\r\n        if (this.state.currentIndex + 1 === this.state.pages) {\r\n            return;\r\n        }\r\n        let index = this.state.currentIndex + 1;\r\n        this.setState({ currentIndex: index }, () => this.props.goToPage(this.state.currentIndex));\r\n    };\r\n\r\n    goToPrevPage = () => {\r\n        if (this.state.currentIndex === 0) {\r\n            return;\r\n        }\r\n        let index = this.state.currentIndex - 1;\r\n        this.setState({ currentIndex: index }, () => this.props.goToPage(this.state.currentIndex));\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='pagination'>\r\n                <Button onClick={this.goToPrevPage} value='&lt;' />\r\n                <span>{`${this.state.currentIndex + 1} of ${this.state.pages}`}</span>\r\n                <Button onClick={this.goToNextPage} value='&gt;' />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { Expense } from '../../types/Expense';\r\nimport ExpenseItem from '../ExpenseItem/ExpenseItem';\r\nimport Pagination from '../Pagination/Pagination';\r\nimport Button from '../Button/Button';\r\nimport './list.scss';\r\n\r\ninterface IListOfExpensesProps {\r\n  expenses: Expense[],\r\n  total: number,\r\n  message: string,\r\n  goToPage(page: number): void,\r\n  sortList(stringName: string): void\r\n};\r\n\r\nclass ListOfExpenses extends React.Component<IListOfExpensesProps> {\r\n  render() {\r\n    return (\r\n      <div className='list-of-expenses'>\r\n        <table className='list'>\r\n          <thead>\r\n            <tr>\r\n              <th>Amount</th>\r\n              <th>Date</th>\r\n              <th>Merchant <Button onClick={() => this.props.sortList('merchant')} value='&#8597;' /></th>\r\n              <th>User <Button onClick={() => this.props.sortList('user')} value='&#8597;' /></th>\r\n              <th>Receipts</th>\r\n              <th>Comments</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {!this.props.message ? this.props.expenses.map(item => {\r\n              return <ExpenseItem key={item.id} data={item} />;\r\n            }) : <tr><td colSpan={7}>{this.props.message}</td></tr>}\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <td colSpan={7}>\r\n                {this.props.total ? <Pagination numberOfItems={this.props.total} goToPage={(page) => this.props.goToPage(page)} /> : null}\r\n              </td>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ListOfExpenses;","import React from 'react';\r\nimport '../Filter/filter.scss';\r\n\r\nfunction FilterInput(props: any) {\r\n        return (\r\n                <label className='filter-field'>\r\n                        {props.label}:\r\n                        <input type={props.type} onChange={props.onChange} value={props.value} />\r\n                </label>\r\n        );\r\n}\r\n\r\nexport default FilterInput;","import React, { Component } from 'react';\r\nimport FilterInput from '../FilterInput/FilterInput';\r\n\r\ninterface IFilterProps {\r\n    onFilterChange(search: object): void;\r\n};\r\n\r\ninterface IFilterState {\r\n    searchByName: string,\r\n    searchByPlace: string\r\n};\r\n\r\nclass Filter extends Component<IFilterProps, IFilterState> {\r\n    constructor(props: any) {\r\n        super(props);\r\n        this.state = {\r\n            searchByName: '',\r\n            searchByPlace: ''\r\n        }\r\n    }\r\n\r\n    onsearchByNameChange = (event: any) => {\r\n        this.setState({ searchByName: event.target.value }, () => this.props.onFilterChange(this.state))\r\n    };\r\n\r\n    onsearchByPlace = (event: any) => {\r\n        this.setState({ searchByPlace: event.target.value }, () => this.props.onFilterChange(this.state))\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <FilterInput type='text' onChange={this.onsearchByNameChange} value={this.state.searchByName} label='Search by name' />\r\n                <FilterInput type='text' onChange={this.onsearchByPlace} value={this.state.searchByPlace} label='Search by place' />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { startFetchExpenses } from '../../actions/expensesAction';\r\nimport { Expense } from '../../types/Expense';\r\nimport { AppActions } from '../../types/actions';\r\nimport { AppState } from '../../store';\r\nimport { bindActionCreators } from 'redux';\r\nimport { ThunkDispatch } from 'redux-thunk';\r\n\r\nimport ListOfExpenses from '../../components/ListOfExpenses/ListOfExpenses';\r\nimport Filter from '../../components/Filter/Filter';\r\n\r\ninterface IExpensesPageProps { }\r\ninterface IExpensesPageState {\r\n  filteredArray: Expense[];\r\n  isSorted: boolean;\r\n}\r\n\r\ntype Props = IExpensesPageProps & LinkStateProps & LinkDispatchProps;\r\n\r\nexport class ExpensesPage extends React.Component<Props, IExpensesPageState> {\r\n  state: IExpensesPageState = {\r\n    filteredArray: [],\r\n    isSorted: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.fetchExpenses();\r\n  }\r\n\r\n  async fetchExpenses(page?: number) {\r\n    let paginationPage: number;\r\n    if (page === undefined) {\r\n      paginationPage = 0;\r\n    } else {\r\n      paginationPage = page;\r\n    }\r\n    await this.props.startFetchExpenses(paginationPage);\r\n    this.onFilterChange('');\r\n  }\r\n\r\n  onFilterChange = (value: any) => {\r\n    let filteredArray = this.props.data.expenses.filter((expense) => {\r\n      if (\r\n        value.searchByName &&\r\n        !expense.user.first\r\n          .toLowerCase()\r\n          .includes(value.searchByName.toLowerCase()) &&\r\n        !expense.user.last\r\n          .toLowerCase()\r\n          .includes(value.searchByName.toLowerCase())\r\n      ) {\r\n        return false;\r\n      } else if (\r\n        value.searchByPlace &&\r\n        !expense.merchant\r\n          .toLowerCase()\r\n          .includes(value.searchByPlace.toLowerCase())\r\n      ) {\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    });\r\n    this.setState({ filteredArray });\r\n  };\r\n\r\n  sortList = (value: string) => {\r\n    let sortedArray: Expense[] = [];\r\n    sortedArray = this.state.filteredArray.sort((a: any, b: any) => {\r\n      if (this.state.isSorted) {\r\n        this.setState({ isSorted: false });\r\n        return value !== 'user'\r\n          ? a[value].localeCompare(b[value])\r\n          : a[value].first.localeCompare(b[value].first);\r\n      } else {\r\n        this.setState({ isSorted: true });\r\n        return value !== 'user'\r\n          ? b[value].localeCompare(a[value])\r\n          : b[value].first.localeCompare(a[value].first);\r\n      }\r\n    });\r\n    this.setState({ filteredArray: sortedArray });\r\n  };\r\n\r\n  render() {\r\n    const { total } = this.props.data;\r\n    return (\r\n      <div className='page'>\r\n        <Link className='go-back-button'\r\n          to={{\r\n            pathname: `/`,\r\n          }}\r\n        >\r\n          &#8592;\r\n        </Link>\r\n        <h1>List of expenses</h1>\r\n        <Filter onFilterChange={this.onFilterChange} />\r\n        {this.state ? (\r\n          <ListOfExpenses\r\n            expenses={this.state.filteredArray}\r\n            total={total}\r\n            goToPage={(page) => {\r\n              this.fetchExpenses(page);\r\n            }}\r\n            sortList={(string) => {\r\n              this.sortList(string);\r\n            }}\r\n            message={this.state.filteredArray.length > 0 ? '' : 'No match'}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\ninterface LinkStateProps {\r\n  data: { expenses: Expense[]; total: number };\r\n}\r\ninterface LinkDispatchProps {\r\n  startFetchExpenses: (page?: number) => void;\r\n}\r\n\r\nconst mapStateToProps = (\r\n  state: AppState,\r\n  ownProps: IExpensesPageProps\r\n): LinkStateProps => {\r\n  return {\r\n    data: state.data,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (\r\n  dispatch: ThunkDispatch<any, any, AppActions>,\r\n  ownProps: IExpensesPageProps\r\n): LinkDispatchProps => ({\r\n  startFetchExpenses: bindActionCreators(startFetchExpenses, dispatch),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExpensesPage);\r\n","import React, { FunctionComponent } from 'react';\r\n\r\ninterface IReceiptsProps {\r\n  userId: string;\r\n  fetchExpense(): void;\r\n}\r\n\r\nconst Receipts: FunctionComponent<IReceiptsProps> = ({\r\n  userId,\r\n  fetchExpense,\r\n}) => {\r\n  const addReceipt = async (event: any) => {\r\n    if (userId) {\r\n      let receipt = new FormData();\r\n      receipt.append('receipt', event.target.files[0]);\r\n      const response = await fetch(\r\n        `/expenses/${userId}/receipts`,\r\n        {\r\n          method: 'POST',\r\n          body: receipt,\r\n        }\r\n      );\r\n      fetchExpense();\r\n      return await response.json();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <label className='receipt-label'>\r\n      <input type='file' name='file' title=' ' onChange={addReceipt} />\r\n      Add receipt\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Receipts;\r\n","import React, { Component } from 'react';\r\n\r\ninterface ICommentProps {\r\n  placeholder: string\r\n  userId: string,\r\n  fetchExpense(): void;\r\n};\r\n\r\ninterface ICommentState {\r\n  comment: string\r\n};\r\n\r\nclass Comment extends Component<ICommentProps, ICommentState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      comment: ''\r\n    };\r\n  }\r\n\r\n  onCommentChange = (event: any) => {\r\n    if (event.target.value.trim() !== '') {\r\n      this.setState({ comment: event.target.value })\r\n    }\r\n  };\r\n\r\n  addComment = async () => {\r\n    if (this.state.comment && this.props.userId) {\r\n      const response = await fetch(\r\n        `/expenses/${this.props.userId}`,\r\n        {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ comment: this.state.comment })\r\n        }\r\n      );\r\n      this.props.fetchExpense();\r\n      this.setState({ comment: '' });\r\n      return await response.json();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <input\r\n          type='text'\r\n          placeholder={this.props.placeholder}\r\n          autoComplete='off'\r\n          value={this.state.comment}\r\n          onChange={this.onCommentChange}\r\n          onKeyPress={(event) => {\r\n            if (event.key === 'Enter') {\r\n              this.addComment();\r\n            }\r\n          }}\r\n        />\r\n        <button className='add-comment' onClick={this.addComment}>{this.props.placeholder}</button>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Comment;","import React, { Component } from 'react';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { Expense } from '../../types/Expense';\r\nimport Receipts from '../../components/Receipts/Receipts';\r\nimport Comment from '../../components/Comment/Comment';\r\nimport moment from 'moment';\r\nimport './expense.scss';\r\n\r\ninterface IExpensePageProps { }\r\n\r\ninterface IExpensePageState {\r\n  id: string;\r\n  currentExpense?: Expense | null;\r\n}\r\n\r\nclass ExpensePage extends Component<\r\n  IExpensePageProps & RouteComponentProps,\r\n  IExpensePageState\r\n  > {\r\n  state: IExpensePageState = {\r\n    id: '',\r\n    currentExpense: null,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const id: string = await (this.props.match.params as any).id;\r\n    this.setState({ id });\r\n    this.fetchExpense(this.state.id);\r\n  }\r\n\r\n  fetchExpense = async (id: string) => {\r\n    const response = await fetch(`/expenses/${id}`);\r\n    const currentExpense = await response.json();\r\n    this.setState({ currentExpense });\r\n  };\r\n\r\n  render() {\r\n    let merchant,\r\n      date,\r\n      amount,\r\n      userName,\r\n      userEmail,\r\n      receipts,\r\n      comment,\r\n      category;\r\n    if (\r\n      this.state.currentExpense &&\r\n      Object.entries(this.state.currentExpense).length > 0\r\n    ) {\r\n      merchant = this.state.currentExpense.merchant;\r\n      date = moment(this.state.currentExpense.date).format('L');\r\n      amount = `${this.state.currentExpense.amount.value} ${this.state.currentExpense.amount.currency}`;\r\n      userName = `${this.state.currentExpense.user.first} ${this.state.currentExpense.user.last}`;\r\n      userEmail = this.state.currentExpense.user.email;\r\n      receipts = this.state.currentExpense.receipts;\r\n      comment = this.state.currentExpense.comment || '-';\r\n      category = this.state.currentExpense.category || '-';\r\n    }\r\n\r\n    return (\r\n      <div className='page expense-page'>\r\n        <Link className='go-back-button'\r\n          to={{\r\n            pathname: `/expenses`,\r\n          }}\r\n        >\r\n          &#8592;\r\n        </Link>\r\n        <h1>Expense</h1>\r\n        <div className='expense-info'>\r\n          <div className='row'>\r\n            <span>Date:</span>\r\n            <span>{date}</span>\r\n          </div>\r\n          <div className='row'>\r\n            <span>Amount:</span>\r\n            <span>{amount}</span>\r\n          </div>\r\n          <div className='row'>\r\n            <span>Merchant:</span>\r\n            <span>{merchant}</span>\r\n          </div>\r\n          <div className='row'>\r\n            <span>User:</span>\r\n            <span>{userName}</span>\r\n          </div>\r\n          <div className='row'>\r\n            <span>User email:</span>\r\n            <span>{userEmail}</span>\r\n          </div>\r\n          <div className='row'>\r\n            <span className='column'>\r\n              <span>Receipts:</span>\r\n              <Receipts\r\n                userId={this.state.id}\r\n                fetchExpense={() => this.fetchExpense(this.state.id)\r\n                }\r\n              />{' '}\r\n            </span>\r\n            {receipts && receipts.length > 0 ? (\r\n              <>\r\n                <span className='no-data'>\r\n                  {receipts.length === 1 ? `${receipts.length} receipt` : `${receipts.length} receipts`}\r\n                </span>\r\n              </>\r\n            ) : (\r\n                <>\r\n                  <span className='no-data'>There are no receipts.</span>\r\n                </>\r\n              )}\r\n          </div>\r\n          <div className='row'>\r\n            <span>Category:</span>\r\n            <span>{category}</span>\r\n          </div>\r\n          <div className='row'>\r\n            <span className='column'>\r\n              <span>Comment:</span>\r\n              <Comment\r\n                placeholder='Change comment'\r\n                userId={this.state.id}\r\n                fetchExpense={() => this.fetchExpense(this.state.id)}\r\n              />\r\n            </span>\r\n            {comment !== '-' ? (\r\n              <span className='no-data'>{comment}</span>\r\n            ) : (\r\n                <span className='no-data'>There are no comment.</span>\r\n              )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExpensePage;\r\n","import React, { Component } from 'react';\r\nimport './errorpage.scss';\r\n\r\nclass ErrorPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className='page'>\r\n                <span className=\"error-text\">404</span>\r\n                <h1 className='home-page-title'>\r\n                    Page not found.\r\n                    </h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ErrorPage;\r\n","import React, { Component } from 'react';\r\n// import './errorpage.scss';\r\n\r\nclass AboutPage extends Component {\r\n    render() {\r\n        return (\r\n            <div className='page'>\r\n                <div className='about-page'>\r\n                    <h2>Front-end challenge for Pleo</h2>\r\n                    <h3><strong><i>Implemented a short version of Pleo App.</i></strong></h3>\r\n                    <h3><strong>Getting started</strong></h3>\r\n                    <ul>\r\n                        <li>First clone the repo on your local machine using a terminal or a git client.</li>\r\n                        <li>In the folder `api` run `npm install`(it sets packages for backend).</li>\r\n                        <li>In the folder `client` run `npm install`(it sets packages for frontend).</li>\r\n                        <li>In the folder `client` run `npm start` to run project (api will run automatically) to run app in the browser.</li>\r\n                    </ul>\r\n                    <h3><strong>How to use app, functionality</strong></h3>\r\n                    <h4>\r\n                        App has several pages:</h4>\r\n                    <div>\r\n                        - HomePage has navigation in the top right corner.\r\n                        <ul>\r\n                            <li>By clicking on Expenses user will be redirectered to Expenses page with list of all expenses.</li>\r\n                            <li>By clicking on About user will be redirectered to About page with short description of the project.</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div>\r\n                        - ExpensesPage\r\n                        <ul>\r\n                            <li>User can see list of expenses.</li>\r\n                            <li>User can navigate to next/previous page to see next part of list of expenses.</li>\r\n                            <li>User can filter on expenses (client side filters) by name of the user or/and by merchant.</li>\r\n                            <li>User can sort expenses by first name of user or by Merchant.</li>\r\n                            <li>User can click on the button `See more` to see detailed information about specific expense.</li>\r\n                        </ul>\r\n                    </div>        \r\n                    <div>\r\n                        - ExpensePage\r\n                        <ul>\r\n                            <li>User can see detailed information about specific exspense.</li>\r\n                            <li>User can add a comment on an expense.</li>\r\n                            <li>User can add a receipt image on an expense.</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div>- AboutPage\r\n                     User can see a short description of the project.</div>\r\n                    <div> - ErrorPage\r\n                     If user enters non-existing url, Error page will appear.</div>\r\n                    <h3><strong>Used technologies</strong></h3>\r\n                    <ul>\r\n                        <li>A single page application using React.</li>\r\n                        <li>CSS has written SASS language.</li>\r\n                        <li>Responsive design.</li>\r\n                        <li>Implemented with a state management library Redux.</li>\r\n                        <li>Implemented in TypeScript.</li>\r\n                    </ul>\r\n                    <h3><strong><i>Author: Olha Afanasieva</i></strong></h3>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AboutPage;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './store';\r\n\r\nimport HomePage from './pages/HomePage/HomePage';\r\nimport ExpensesPage from './pages/ExpensesPage/ExpensesPage';\r\nimport ExpensePage from './pages/ExpensePage/ExpensePage';\r\nimport ErrorPage from './pages/ErrorPage/ErrorPage';\r\nimport AboutPage from './pages/AboutPage/AboutPage';\r\n\r\nimport './App.scss';\r\n\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className='App'>\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path='/' component={HomePage} />\r\n            <Route exact path='/about' component={AboutPage} />\r\n            <Route exact path='/expenses' component={ExpensesPage} />\r\n            <Route exact path='/expenses/:id' component={ExpensePage} />\r\n            <Route exact path='/*' component={ErrorPage} />\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}